security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\MyLoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    role_hierarchy:
        ROLE_AUTHOR: ROLE_USER # Un utilisateur avec le rôle ROLE_AUTHOR aura à minima les droits d'un ROLE_USER
        ROLE_ADMIN: ROLE_USER # idem pour un utilisateur ROLE_ADMIN
        ROLE_OWNER: [ROLE_ADMIN, ROLE_MANAGER, ROLE_ALLOWED_TO_SWITCH] # un utilisateur ROLE_OWNER aura à minima les droits de 3 rôles

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin/non-protected, roles: PUBLIC_ACCESS } # Autoriser /admin/non-protected* pour tout le monde (attention à l'ordre !)
        - { path: ^/admin, roles: ROLE_ADMIN } # Il faut être ROLE_ADMIN pour accéder à /admin/*
        - { path: ^/profile, roles: ROLE_USER } # Il faut être ROLE_USER pour accéder à /profile/*

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
